{"version":3,"sources":["redux/tilesStore/tilesStore.ts","tiles/tiles.ts","redux/vievwedTile/viewedTileStore.ts","redux/counterStore/counterStore.ts","redux/resultsStore/resultsStore.ts","redux/startGameStore/startGameStore.ts","redux/rootStore/rootStore.ts","localStorage/localStorage.ts","components/Tile/Tile.tsx","components/TilesBody/TilesBody.tsx","components/StepCounter/StepCounter.tsx","components/Results/Results.tsx","components/RestartGame/RestartGame.tsx","components/StartGame/StartGame.tsx","App.tsx","index.tsx"],"names":["isOpenTile","id","isOpen","type","initialTileState","tiles","color","isFindCouple","tilesReducer","state","action","map","tile","sort","Math","random","setViewedTile","viewedTile","initialViewedTileState","viewedTailReducer","initialState","count","countReducer","changeNickName","name","addResult","result","initialResultState","results","resultReducer","length","slice","changeStartGameStatus","status","initialStartGameState","startGameReducer","rootReducer","combineReducers","tails","tailsReducer","viewedTail","startGame","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","tilesSelector","viewedTileSelector","counterSelector","nameSelector","resultsSelector","startGameSelector","Tile","tilesDispatch","useDispatch","viewedTileDispatch","counterDispatch","useSelector","className","onClick","clickOnTile","style","backgroundColor","transform","TilesBody","useEffect","setTimeout","key","StepCounter","counter","prepareCount","floor","Results","index","steps","RestartGame","countDispatch","resultDispatch","startGameDispatch","useState","isResults","setIsResults","uuidv4","StartGame","isNickName","setIsNickName","value","onChange","event","target","checkNickNameSize","disabled","App","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.949373d2.chunk.js","sourcesContent":["import { Action } from 'redux';\r\nimport {tiles} from \"../../tiles/tiles\";\r\n\r\nconst IS_OPEN_TILE = \"IS_OPEN_TILE\";\r\nconst CLOSE_ALL_TILES = \"CLOSE_ALL_TILES\";\r\nconst IS_FIND_COUPLE = \"IS_FIND_COUPLE\";\r\nconst CHANGE_ALL_FIND_COUPLE_STATUS = \"CHANGE_ALL_FIND_COUPLE_STATUS\";\r\nconst SHACKED_TILES = \"SHACKED_TILES\";\r\n\r\ntype IsOpenTail = Action<typeof IS_OPEN_TILE> & {\r\n    id: number;\r\n    isOpen: boolean;\r\n}\r\n\r\ntype CloseAllTiles = Action<typeof CLOSE_ALL_TILES>;\r\n\r\ntype IsFindCouple = Action<typeof IS_FIND_COUPLE> & {\r\n    color: string;\r\n};\r\n\r\ntype ChangeAllFindCoupleStatus = Action<typeof CHANGE_ALL_FIND_COUPLE_STATUS>;\r\n\r\ntype ShackedTiles = Action<typeof SHACKED_TILES>;\r\n\r\n\r\nexport const isOpenTile = (id: number, isOpen: boolean): IsOpenTail => ({\r\n    type: IS_OPEN_TILE,\r\n    id,\r\n    isOpen,\r\n});\r\n\r\nexport const closeAllTiles = (): CloseAllTiles => (\r\n    {\r\n        type: CLOSE_ALL_TILES,\r\n    }\r\n);\r\n\r\nexport const isFindCoupleStatus = (color: string): IsFindCouple => (\r\n    {\r\n        type: IS_FIND_COUPLE,\r\n        color,\r\n    }\r\n);\r\n\r\nexport const changeAllFindCoupleStatus = (): ChangeAllFindCoupleStatus => (\r\n    {\r\n        type: CHANGE_ALL_FIND_COUPLE_STATUS,\r\n    }\r\n);\r\n\r\nexport const shackedTiles = (): ShackedTiles => (\r\n    {\r\n        type: SHACKED_TILES,\r\n    }\r\n);\r\n\r\nexport type InitialTileState = {\r\n    tiles: Tile[],\r\n}\r\n\r\nconst initialTileState: InitialTileState = {\r\n    tiles: tiles,\r\n};\r\n\r\nexport type AllTilesAction = IsOpenTail\r\n    | CloseAllTiles\r\n    | IsFindCouple\r\n    | ChangeAllFindCoupleStatus\r\n    | ShackedTiles;\r\n\r\nconst tilesReducer = (state = initialTileState, action: AllTilesAction) => {\r\n    switch (action.type) {\r\n        case IS_OPEN_TILE: return {\r\n           tiles: state.tiles.map(tile =>\r\n               (action.id === tile.id)\r\n                   ? {\r\n               ...tile,\r\n                   isOpen: action.isOpen,\r\n                   }\r\n                   : tile\r\n           )\r\n        };\r\n        case CLOSE_ALL_TILES: return {\r\n            tiles: state.tiles.map(tile => (\r\n                {\r\n                    ...tile,\r\n                    isOpen: false,\r\n                }\r\n            ))\r\n        };\r\n        case IS_FIND_COUPLE: return {\r\n          tiles: state.tiles.map(tile => (\r\n              (tile.color === action.color)\r\n              ? {\r\n                  ...tile,\r\n                      isFindCouple: true,\r\n                  }\r\n                  : tile\r\n          ))\r\n        };\r\n        case CHANGE_ALL_FIND_COUPLE_STATUS: return {\r\n            tiles: state.tiles.map(tile => (\r\n                {\r\n                    ...tile,\r\n                    isFindCouple: false,\r\n                    isOpen: false,\r\n                }\r\n            ))\r\n        };\r\n        case SHACKED_TILES: return {\r\n            tiles: [...state.tiles].sort(() => Math.random() - 0.5),\r\n            };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default tilesReducer;\r\n","export const tiles: Tile[] = [\r\n    {\r\n        id: 1,\r\n        color: \"red\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    } ,\r\n    {\r\n        id: 2,\r\n        color: \"maroon\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        color: \"pink\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        color: \"yellow\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        color: \"red\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 6,\r\n        color: \"blue\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 7,\r\n        color: \"pink\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 8,\r\n        color: \"indigo\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 9,\r\n        color: \"maroon\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 10,\r\n        color: \"green\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 11,\r\n        color: \"blue\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 12,\r\n        color: \"indigo\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 13,\r\n        color: \"teal\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 14,\r\n        color: \"yellow\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 15,\r\n        color: \"teal\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    },\r\n    {\r\n        id: 16,\r\n        color: \"green\",\r\n        isOpen: false,\r\n        isFindCouple: false,\r\n    }\r\n];\r\n","import { Action } from 'redux';\r\n\r\nconst SET_VIEWED_TILE = \"SET_VIEWED_TILE\";\r\nconst REMOVE_ALL_TILES = \"REMOVE_ALL_TILES\";\r\n\r\ntype SetViewedTile = Action<typeof SET_VIEWED_TILE> & {\r\n    viewedTile: Tile;\r\n}\r\n\r\ntype RemoveAllTiles = Action<typeof REMOVE_ALL_TILES>\r\n\r\nexport const setViewedTile = (viewedTile: Tile): SetViewedTile => (\r\n    {\r\n        type: SET_VIEWED_TILE,\r\n        viewedTile,\r\n    }\r\n);\r\n\r\nexport const removeAllTiles = (): RemoveAllTiles => (\r\n    {\r\n        type: REMOVE_ALL_TILES,\r\n    }\r\n) ;\r\n\r\nexport type AllViewedTileAction = SetViewedTile | RemoveAllTiles;\r\n\r\nexport type InitialViewedTileState = {\r\n    viewedTile: Tile[];\r\n};\r\n\r\nconst initialViewedTileState: InitialViewedTileState = {\r\n    viewedTile: [],\r\n};\r\n\r\nconst viewedTailReducer = (state = initialViewedTileState, action: AllViewedTileAction) => {\r\n    switch (action.type) {\r\n        case SET_VIEWED_TILE:\r\n            return {\r\n            viewedTile: [...state.viewedTile, action.viewedTile],\r\n        };\r\n        case REMOVE_ALL_TILES: return {\r\n            viewedTile: [],\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default viewedTailReducer;\r\n","import { Action } from 'redux';\r\n\r\nconst INCREASE_COUNT = \"INCREASE_COUNT\";\r\nconst CLEAR_COUNT = \"CLEAR_COUNT\";\r\n\r\ntype IncreaseCount = Action<typeof INCREASE_COUNT>;\r\ntype ClearCount = Action<typeof CLEAR_COUNT>;\r\n\r\nexport const increaseCount = (): IncreaseCount => (\r\n    {\r\n        type: INCREASE_COUNT,\r\n    }\r\n);\r\nexport const clearCount = (): ClearCount => (\r\n    {\r\n        type: CLEAR_COUNT,\r\n    }\r\n);\r\n\r\nexport type AllCountAction = IncreaseCount | ClearCount;\r\n\r\nexport type InitialCountState = {\r\n    count: number;\r\n};\r\n\r\nconst initialState: InitialCountState = {\r\n    count: 0,\r\n};\r\n\r\nconst countReducer = (state = initialState, action: AllCountAction) => {\r\n    switch (action.type) {\r\n        case INCREASE_COUNT: return {\r\n            count: state.count + 1,\r\n        };\r\n        case CLEAR_COUNT: return {\r\n            count: 0,\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default countReducer;\r\n\r\n","import { Action } from 'redux';\r\n\r\nconst CHANGE_NICK_NAME = \"CHANGE_NICK_NAME\";\r\nconst ADD_RESULT = \"ADD_RESULT\";\r\n\r\ntype ChangeNickName = Action<typeof CHANGE_NICK_NAME> & {\r\n    name: string;\r\n}\r\ntype AddResult = Action<typeof ADD_RESULT> & {\r\n    result: Result;\r\n}\r\n\r\nexport const changeNickName = (name: string): ChangeNickName => (\r\n    {\r\n        type: CHANGE_NICK_NAME,\r\n        name,\r\n    }\r\n);\r\nexport const addResult = (result: Result): AddResult => (\r\n    {\r\n        type: ADD_RESULT,\r\n        result,\r\n    }\r\n);\r\n\r\nexport type AllResultActions = ChangeNickName | AddResult;\r\n\r\nexport type InitialResultState = {\r\n    name: string;\r\n    results: Result[];\r\n}\r\n\r\nconst initialResultState: InitialResultState = {\r\n    name: \"Player\",\r\n    results: [],\r\n};\r\n\r\nconst resultReducer = (state = initialResultState, action: AllResultActions) => {\r\n    switch (action.type) {\r\n        case CHANGE_NICK_NAME: return {\r\n            ...state,\r\n            name: action.name\r\n        };\r\n        case ADD_RESULT: return {\r\n            ...state,\r\n            results: (state.results.length >= 10)\r\n                        ? [...state.results.slice(1, 10), action.result]\r\n                        : [...state.results, action.result]\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default resultReducer;\r\n","import { Action } from 'redux';\r\n\r\nconst IS_START_GAME = \"IS_START_GAME\";\r\n\r\ntype IsStartGame = Action<typeof IS_START_GAME> & {\r\n    status: boolean;\r\n};\r\n\r\nexport const changeStartGameStatus = (status: boolean): IsStartGame => ({\r\n    type: IS_START_GAME,\r\n    status,\r\n});\r\n\r\nexport type AllStartGameActions = IsStartGame;\r\n\r\nexport type InitialStartGameState = {\r\n    status: boolean;\r\n};\r\n\r\nconst initialStartGameState: InitialStartGameState = {\r\n    status: false,\r\n};\r\n\r\nconst startGameReducer = (state = initialStartGameState, action: AllStartGameActions) => {\r\n    switch(action.type) {\r\n        case IS_START_GAME: return {\r\n            status: action.status\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default startGameReducer;\r\n","import { combineReducers, createStore } from 'redux';\r\nimport tailsReducer, { InitialTileState } from \"../tilesStore/tilesStore\";\r\nimport viewedTailReducer, { InitialViewedTileState } from \"../vievwedTile/viewedTileStore\";\r\nimport countReducer, { InitialCountState } from \"../counterStore/counterStore\";\r\nimport resultReducer, {InitialResultState} from \"../resultsStore/resultsStore\";\r\nimport startGameReducer, {InitialStartGameState} from \"../startGameStore/startGameStore\";\r\nimport { loadState, saveState } from \"../../localStorage/localStorage\";\r\n\r\nconst rootReducer = combineReducers({\r\n   tails: tailsReducer,\r\n   viewedTail: viewedTailReducer,\r\n   count: countReducer,\r\n   results: resultReducer,\r\n   startGame: startGameReducer,\r\n});\r\n\r\nconst persistedState = loadState();\r\n\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n\r\nexport type State = {\r\n    tails: InitialTileState;\r\n    viewedTail: InitialViewedTileState;\r\n    count: InitialCountState;\r\n    results: InitialResultState;\r\n    startGame: InitialStartGameState;\r\n}\r\n\r\n//tailsSelector\r\nexport const tilesSelector = (state: State) => (state.tails.tiles);\r\n\r\n//viewedTailSelector\r\nexport const viewedTileSelector = (state: State) => (state.viewedTail.viewedTile);\r\n\r\n//stepCounter\r\nexport const counterSelector = (state: State) => (state.count.count);\r\n\r\n//resultsSelectors\r\nexport const nameSelector = (state: State) => (state.results.name);\r\nexport const resultsSelector = (state: State) => (state.results.results);\r\n\r\n// startGameSelector\r\nexport const startGameSelector = (state: State) => (state.startGame.status);\r\n\r\nexport default store;\r\n","import { State } from \"../redux/rootStore/rootStore\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: State) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"state\", serializedState);\r\n    } catch (err) {}\r\n};\r\n","import React, { Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Tile.scss\";\r\nimport {AllTilesAction, isOpenTile} from \"../../redux/tilesStore/tilesStore\";\r\nimport { viewedTileSelector } from \"../../redux/rootStore/rootStore\";\r\nimport {AllViewedTileAction, setViewedTile} from \"../../redux/vievwedTile/viewedTileStore\";\r\nimport {AllCountAction, increaseCount} from \"../../redux/counterStore/counterStore\";\r\n\r\ntype Props = {\r\n    tile: Tile;\r\n}\r\n\r\nconst Tile: React.FC<Props> = ({ tile }) => {\r\n    const { id, color, isOpen, isFindCouple } = tile;\r\n    const tilesDispatch = useDispatch<Dispatch<AllTilesAction>>();\r\n    const viewedTileDispatch = useDispatch<Dispatch<AllViewedTileAction>>();\r\n    const counterDispatch = useDispatch<Dispatch<AllCountAction>>();\r\n    const viewedTile = useSelector(viewedTileSelector);\r\n\r\n\r\n    const clickOnTile = (tile: Tile) => {\r\n        if (viewedTile.length === 0) {\r\n            tilesDispatch(isOpenTile(id, true));\r\n            viewedTileDispatch(setViewedTile(tile));\r\n            counterDispatch(increaseCount());\r\n        }\r\n        if (viewedTile.length === 1 && viewedTile[0].id !== tile.id) {\r\n            tilesDispatch(isOpenTile(id, true));\r\n            viewedTileDispatch(setViewedTile(tile));\r\n            counterDispatch(increaseCount());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                isFindCouple\r\n                    ? \"tile tile__found\"\r\n                    : \"tile\"\r\n            }\r\n            onClick={\r\n                () => {\r\n                    clickOnTile(tile);\r\n                }\r\n            }\r\n            style={isOpen\r\n                ? {\r\n                backgroundColor: color,\r\n                }\r\n                : {\r\n                    backgroundColor: 'tan',\r\n                    transform: 'rotateY(180deg)'\r\n                }\r\n            }\r\n        >\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Tile;\r\n","import React, {Dispatch, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport \"./TilesBody.scss\";\r\nimport {tilesSelector, viewedTileSelector} from \"../../redux/rootStore/rootStore\";\r\nimport {AllTilesAction, closeAllTiles, isFindCoupleStatus, shackedTiles} from \"../../redux/tilesStore/tilesStore\";\r\nimport {AllViewedTileAction, removeAllTiles} from \"../../redux/vievwedTile/viewedTileStore\";\r\n\r\nconst TilesBody = () => {\r\n    const tilesDispatch = useDispatch<Dispatch<AllTilesAction>>();\r\n    const viewedTileDispatch = useDispatch<Dispatch<AllViewedTileAction>>()\r\n    useEffect(() => {\r\n        tilesDispatch(shackedTiles());\r\n    }, []);\r\n    const tiles = useSelector(tilesSelector);\r\n    const viewedTile = useSelector(viewedTileSelector);\r\n\r\n    //checking viewedTiles\r\n    useEffect(() => {\r\n        if (viewedTile.length === 2) {\r\n            if (viewedTile[0].color !== viewedTile[1].color) {\r\n                setTimeout(() => {\r\n                    tilesDispatch(closeAllTiles());\r\n                    viewedTileDispatch(removeAllTiles());\r\n                }, 500);\r\n            }\r\n\r\n            if (viewedTile[0].color === viewedTile[1].color) {\r\n                setTimeout(() => {\r\n                    tilesDispatch(isFindCoupleStatus(viewedTile[0].color));\r\n                    viewedTileDispatch(removeAllTiles());\r\n                }, 500);\r\n            }\r\n        }\r\n    }, [viewedTile]);\r\n\r\n    return (\r\n        <div className=\"tiles\">\r\n            {tiles.map(tile => (\r\n                <Tile\r\n                    key={tile.id}\r\n                    tile={tile}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TilesBody;\r\n","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport './StepCounter.scss';\r\nimport { counterSelector } from \"../../redux/rootStore/rootStore\";\r\n\r\nconst StepCounter = () => {\r\n    const counter = useSelector(counterSelector);\r\n\r\n    const prepareCount = Math.floor(counter/2);\r\n\r\n    return (\r\n      <div className=\"counter\">\r\n          <h1>\r\n              {`Steps to win: ${prepareCount}`}\r\n          </h1>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default StepCounter;\r\n","import React from \"react\";\r\nimport './Results.scss';\r\n\r\ntype Props = {\r\n    result: Result;\r\n    index: number;\r\n}\r\n\r\nconst Results: React.FC<Props> = ({ result, index }) => {\r\n\r\n    return (\r\n        <div className=\"results\">\r\n            <div className=\"results__list\">\r\n                <div className=\"results__item\">\r\n                    <div className=\"results__nickname results__description\">\r\n                        {`${index + 1} ${result.name}:`}\r\n                    </div>\r\n                    <div className=\"results__steps results__description\">\r\n                        {result.steps / 2}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './RestartGame.scss';\r\nimport { AllTilesAction, changeAllFindCoupleStatus } from \"../../redux/tilesStore/tilesStore\";\r\nimport { AllCountAction, clearCount } from \"../../redux/counterStore/counterStore\";\r\nimport {counterSelector, nameSelector, resultsSelector} from \"../../redux/rootStore/rootStore\";\r\nimport {addResult, AllResultActions} from \"../../redux/resultsStore/resultsStore\";\r\nimport Results from \"../Results/Results\";\r\nimport {AllStartGameActions, changeStartGameStatus} from \"../../redux/startGameStore/startGameStore\";\r\n\r\nconst RestartGame = () => {\r\n    const tilesDispatch = useDispatch<Dispatch<AllTilesAction>>();\r\n    const countDispatch = useDispatch<Dispatch<AllCountAction>>();\r\n    const resultDispatch = useDispatch<Dispatch<AllResultActions>>();\r\n    const startGameDispatch = useDispatch<Dispatch<AllStartGameActions>>();\r\n    const count = useSelector(counterSelector);\r\n    const name = useSelector(nameSelector);\r\n    const results = useSelector(resultsSelector);\r\n    const [isResults, setIsResults] = useState<boolean>(false);\r\n\r\n    const restartGame = () => {\r\n        tilesDispatch(changeAllFindCoupleStatus());\r\n        countDispatch(clearCount());\r\n        resultDispatch(addResult(\r\n            {\r\n                name: name,\r\n                steps: count,\r\n                id: uuidv4(),\r\n            }\r\n        ))\r\n    };\r\n    const showResults = () => {\r\n        resultDispatch(addResult(\r\n            {\r\n                name: name,\r\n                steps: count,\r\n                id: uuidv4(),\r\n            }\r\n        ));\r\n        setIsResults(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"restart\">\r\n            {!isResults\r\n            && <div className=\"restart__button-wrapper\">\r\n                <button\r\n                    onClick={() => restartGame()}\r\n                    className=\"restart__button\"\r\n                >\r\n                    Restart game\r\n                </button>\r\n                <button\r\n                    className=\"restart__button\"\r\n                    onClick={() => showResults()}\r\n                >\r\n                    Show latest results\r\n                </button>\r\n            </div>}\r\n            {isResults\r\n            && <div className=\"restart__results-wrapper\">\r\n                <div className=\"restart__result-header\">\r\n                    Latest results :\r\n                </div>\r\n                {results.map((result, index) => (\r\n                    <div\r\n                        key={result.id}\r\n                    >\r\n                        <Results\r\n                            result={result}\r\n                            index={index}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"restart__results-button restart__button\"\r\n                    onClick={() => {\r\n                        startGameDispatch(changeStartGameStatus(false));\r\n                        tilesDispatch(changeAllFindCoupleStatus());\r\n                        countDispatch(clearCount());\r\n                    }}\r\n                >\r\n                    Restart game\r\n                </button>\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RestartGame;\r\n","import React, {ChangeEvent, Dispatch, useState} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport './StartGame.scss';\r\nimport { nameSelector } from \"../../redux/rootStore/rootStore\";\r\nimport {AllResultActions, changeNickName} from \"../../redux/resultsStore/resultsStore\";\r\nimport {AllStartGameActions, changeStartGameStatus} from \"../../redux/startGameStore/startGameStore\";\r\n\r\n\r\n\r\nconst StartGame = () => {\r\n    const [isNickName, setIsNickName] = useState<boolean>(false);\r\n    const name = useSelector(nameSelector);\r\n    const resultDispatch = useDispatch<Dispatch<AllResultActions>>();\r\n    const startGameDispatch = useDispatch<Dispatch<AllStartGameActions>>();\r\n\r\n    const checkNickNameSize = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value.length;\r\n        if (value < 2 || value >= 10) {\r\n            setIsNickName(true);\r\n            resultDispatch(changeNickName(event.target.value));\r\n        } else {\r\n            setIsNickName(false);\r\n            resultDispatch(changeNickName(event.target.value));\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"start-game\">\r\n            <div className=\"start-game__container\">\r\n                <div className=\"start-game__content\">\r\n                    <div className=\"start-game__input-description\">\r\n                        Enter your nick name:\r\n                    </div>\r\n\r\n                    <div className=\"start-game__input-wrapper\">\r\n                        <input\r\n                            className=\"start-game__input\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={(event) => checkNickNameSize(event)}\r\n                        />\r\n                        {isNickName && <div className=\"start-game__nickname-alarm\">\r\n                            nickname must be more than 2 and less than 11 characters\r\n                        </div>}\r\n                    </div>\r\n\r\n                    <button\r\n                        disabled={isNickName}\r\n                        className=\"start-game__button btn-grad\"\r\n                        onClick={() => startGameDispatch(changeStartGameStatus(true))}\r\n                    >\r\n                        Start game\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartGame;\r\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport './app.scss';\nimport TilesBody from \"./components/TilesBody/TilesBody\";\nimport StepCounter from \"./components/StepCounter/StepCounter\";\nimport {startGameSelector, tilesSelector} from \"./redux/rootStore/rootStore\";\nimport RestartGame from \"./components/RestartGame/RestartGame\";\nimport StartGame from \"./components/StartGame/StartGame\";\n\nfunction App() {\n    const tiles = useSelector(tilesSelector);\n    const isStartGame = useSelector(startGameSelector);\n\n    if (!isStartGame) {\n        return (\n            <StartGame />\n        )\n    }\n\n    if (tiles.every(tile => tile.isFindCouple)) {\n        return (\n            <RestartGame />\n        )\n    }\n\n  return (\n    <div className=\"app\">\n        <StepCounter />\n        <TilesBody />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport store from \"./redux/rootStore/rootStore\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}